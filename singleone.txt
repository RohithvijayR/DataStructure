#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAX_N 100000

int N, K, M, S;
int forbidden[MAX_N + 1];
int minSteps[MAX_N + 1];

// Perform BFS to calculate the minimum steps
void bfs() {
    int queue[MAX_N + 1], front = 0, rear = 0;
    memset(minSteps, -1, sizeof(minSteps));
    queue[rear++] = S - 1; // Convert 1-based index to 0-based
    minSteps[S - 1] = 0;

    while (front < rear) {
        int current = queue[front++];

        for (int i = current - K + 1; i <= current; ++i) {
            if (i < 0 || i + K > N) continue; // Check bounds
            int next = i + K - 1; // Rightmost position after reversing subarray

            if (forbidden[next] || minSteps[next] != -1) continue;

            minSteps[next] = minSteps[current] + 1;
            queue[rear++] = next;
        }
    }
}

int main() {
    scanf("%d %d %d %d", &N, &K, &M, &S);

    memset(forbidden, 0, sizeof(forbidden));
    for (int i = 0; i < M; ++i) {
        int pos;
        scanf("%d", &pos);
        forbidden[pos - 1] = 1; // Convert to 0-based
    }

    bfs();

    for (int i = 0; i < N; ++i) {
        printf("%d ", forbidden[i] ? -1 : minSteps[i]);
    }
    printf("\n");

    return 0;
}
